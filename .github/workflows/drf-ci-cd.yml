name: DRF CI/CD

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  IMAGE_NAME: nyobeelouga5/drf-api
  PYTHON_VERSION: "3.10"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install lint tools (ruff, black, flake8)
        run: |
          pip install --upgrade pip
          pip install ruff black flake8
      - name: Ruff check
        run: ruff check . --fix
      - name: Black format
        run: black .
      - name: Flake8 lint
        run: flake8 .

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install Bandit
        run: pip install bandit
      - name: Bandit security scan
        run: bandit -r . -c .bandit

  test:
    needs: [lint, security]
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://parking_user:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/parking_db
      DJANGO_SETTINGS_MODULE: core.settings
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: 1
      GITHUB_CLIENT_ID: ${{ secrets.CLIENT_ID_GITHUB }}
      GITHUB_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET_GITHUB }}
      GITHUB_REDIRECT_URI: http://localhost:8000/auth/github/callback/
      POSTGRES_DB: parking_db
      POSTGRES_USER: parking_user
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: parking_db
          POSTGRES_USER: parking_user
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Générer le fichier .env pour la CI
        run: |
          echo "DATABASE_URL=postgres://parking_user:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/parking_db" >> .env
          echo "DJANGO_SETTINGS_MODULE=core.settings" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=1" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.CLIENT_ID_GITHUB }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.CLIENT_SECRET_GITHUB }}" >> .env
          echo "GITHUB_REDIRECT_URI=http://localhost:8000/auth/github/callback/" >> .env
          echo "POSTGRES_DB=parking_db" >> .env
          echo "POSTGRES_USER=parking_user" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt --no-cache-dir
      - name: Wait for Postgres to be ready
        run: until pg_isready -h localhost -p 5432; do sleep 1; done
      - name: Run Django tests
        run: |
          set -e
          chmod +x scripts/run_tests.sh
          ./scripts/run_tests.sh

  build_and_push:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://parking_user:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/parking_db
      DJANGO_SETTINGS_MODULE: core.settings
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: 1
      GITHUB_CLIENT_ID: ${{ secrets.CLIENT_ID_GITHUB }}
      GITHUB_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET_GITHUB }}
      GITHUB_REDIRECT_URI: http://localhost:8000/auth/github/callback/
      POSTGRES_DB: parking_db
      POSTGRES_USER: parking_user
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: localhost
    steps:
      - uses: actions/checkout@v3
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and tag Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # ---- Smoke Test ----
      - name: Run Docker container for smoke test
        run: |
          docker run -d --name parkapp-test \
            -e DATABASE_URL=${DATABASE_URL} \
            -e DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE} \
            -e SECRET_KEY=${SECRET_KEY} \
            -e DEBUG=${DEBUG} \
            -e GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID} \
            -e GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET} \
            -e GITHUB_REDIRECT_URI=${GITHUB_REDIRECT_URI} \
            -e POSTGRES_DB=${POSTGRES_DB} \
            -e POSTGRES_USER=${POSTGRES_USER} \
            -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
            -e POSTGRES_HOST=${POSTGRES_HOST} \
            -p 8000:8000 $IMAGE_NAME:latest
      - name: Wait for the application to start
        run: sleep 10
      - name: Smoke test - Check HTTP response
        run: |
          curl --fail http://localhost:8000/api/docs/swagger/ || (docker logs parkapp-test && exit 1)
      - name: Clean up
        if: always()
        run: docker rm -f parkapp-test || true

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Install Railway CLI
        run: curl -fsSL https://railway.app/install.sh | sh
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service ParkApp